# Please adjust cache size (max_size=250m) to a value that you can accommodate in RAM! Advised values: 2 GB RAM: 500m, 4 GB RAM: 1g, 8 GB RAM: 2g, etc..

proxy_cache_path /dev/shm/proxy_cache inactive=8h levels=1:2 keys_zone=images:512m max_size=250m loader_files=5000 use_temp_path=off;
proxy_cache_min_uses 2;
proxy_read_timeout 60s;
proxy_send_timeout 60s;
proxy_buffers 256 8k;
proxy_buffering on;

upstream images {
    server 127.0.0.1:80;

    # a pool with at most 200 connections
    keepalive 200;
}

#upstream redis {
#    server 127.0.0.1:6379;
#
#    # Or: server unix:/var/run/redis/redis.sock;
#
#    # a pool with at most 1024 connections
#    keepalive 1024;
#}

#geo $limit {
#    default 1;
#    10.0.0.0/8 0;
#    192.168.0.0/24 0;
#}

#map $limit $limit_key {
#    0 '';
#    1 $remote_addr;
#}

server {
    listen 80;

    server_name images.weserv.local;

    access_log off;
    error_log /var/log/nginx/weserv-local-error.log;

    root /var/www/imagesweserv/public;
    absolute_redirect off;

    error_page 404 /404.html;

    allow 127.0.0.1;
    allow ::1;
    deny all;

    location / {
        resolver 127.0.0.11 valid=10s; # Use Docker's embedded DNS server
        resolver_timeout 5s;
        weserv proxy;

        add_header X-Upstream-Response-Length $weserv_response_length;
    }

    location /static/ {
        weserv filter;

        alias /var/www/imagesweserv/public/;
    }
}

server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;

    server_name _;

    access_log /var/log/nginx/weserv-access.log main buffer=4096 flush=5m;
    access_log /var/log/nginx/weserv-stats.log stats buffer=4096 flush=5m;
    error_log /var/log/nginx/weserv-error.log;

    root /var/www/imagesweserv/public;

    include weserv-headers.conf;
    add_header X-Cache-Status $upstream_cache_status;

    location / {
        expires 1y; # Far-future expiration for static files
        try_files $uri $uri.html$is_args @proxy;
    }

    location = /clear-cache/ {
        return 301 /clear-cache;
    }

    location = /clear-cache {
        default_type application/json;
        include weserv-headers.conf;
        add_header Cache-Control 'no-store, must-revalidate';
        add_header Clear-Site-Data '"cache", "storage"';
        return 200 '{"status":"success", "code":200, "message":"Browser cache successfully cleared!"}';
    }

#    location = /quota/ {
#        return 301 /quota;
#    }

#    location = /quota {
#        rate_limit $limit_key requests=2500 period=10m burst=2499;
#        rate_limit_quantity 0;
#        rate_limit_pass redis;
#        rate_limit_headers on;
#
#        error_page 404 =200 @quota;
#    }

#    location @quota {
#        default_type application/json;
#        include weserv-headers.conf;
#        add_header Cache-Control 'no-store, must-revalidate';
#        if ($limit = 0) {
#          return 200 '{"status":"success", "code":200, "message":"Your IP address ($remote_addr) bypasses the rate limiter, have fun!"}';
#        }
#        return 200 '{"X-RateLimit-Limit":$sent_http_x_ratelimit_limit, "X-RateLimit-Remaining":$sent_http_x_ratelimit_remaining, "X-RateLimit-Reset":$sent_http_x_ratelimit_reset}';
#    }

    location @proxy {
        proxy_cache images;
        proxy_cache_key '$request_method|wsrv.nl|$request_uri';
        proxy_cache_methods GET HEAD;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_cache_valid 200 301 410 7d;
        proxy_cache_valid 429 500 0;
        proxy_cache_valid any 15m;
        proxy_cache_use_stale error timeout updating;

        proxy_pass http://images;
        proxy_set_header Host images.weserv.local;
        proxy_set_header X-Original-Host $http_host;
        proxy_set_header X-Original-Scheme $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;

        # Enable the upstream persistent connection
        proxy_http_version 1.1;
        proxy_set_header Connection '';

        # 2500 allowed requests in 10 minutes
#        rate_limit $limit_key requests=2500 period=10m burst=2499;
#        rate_limit_pass redis;
    }
}